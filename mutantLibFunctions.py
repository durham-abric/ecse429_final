mutantNameEntryTemplate = "File: {} | "
simulationEntryTemplate = " | Killed: {} | Expected Output: {} | Mutated Output: {} | Test Vector: {}\n"

#Get the fault-free SUT from the library header
def getSoftwareUnderTest(libLines):
    program = libLines[0].split()[3]
    return program

#Extract a dictionary of mutant data from an entry in the mutant lib
# type=0 implies the mutant file name hasn't been added (by insertMutants.py)
# type=1 implies the entry includes the mutant file name
def extractMutantData(type, libLine):
    data = {}
    words = libLine.split()
    #Extract data based on type
    offset = 0
    if type != 0:
        data["file"] = words[1]
        offset = 3
    data["line"] = int(words[1 + offset])
    data["position"] = int(words[4 + offset])
    data["original"] = words[7 + offset]
    data["mutant"] = words[10 + offset]
    return data

#Get list of all mutants (dictionaries of mutant properties) form the library lines
def getLibMutants(type, libLines):
    mutantLineStarter = "Line:" if type == 0 else "File:"
    mutants = []
    for lineNum in range(len(libLines)):
        #Access line content (& skip if line is empty)
        line = libLines[lineNum]
        if not line.strip(): continue
        #Determine if line is a mutant entry (not header, summary, etc..)
        words = line.split()
        if words[0] == mutantLineStarter:
            data = extractMutantData(type, line)
            mutants.append(data)
    return mutants

#Insert the path to the mutant file generated by insertMutants.py
#Should only be called by insertMutants.py
def addMutantFile(libLines, mutant, file):
    for lineNum in range(len(libLines)):
        #Access line content (& skip if line is empty)
        line = libLines[lineNum]
        if not line.strip(): continue
        #Determine if line is a mutant entry (not header, summary, etc..)
        words = line.split()
        if words[0] == "Line:":
            #Determine if the line corresponds to the mutant file being added
            if extractMutantData(0, line) == mutant:
                line = mutantNameEntryTemplate.format(file) + line
                libLines[lineNum] = line
                return

#Insert data on the simulation outcome for the mutant
#Include whether mutant is killed, fault-free vs. mutant output, and test vector that killed the mutant
#Should only be called by simulateMutants.py
def addSimulationData(libLines, mutant):
    for lineNum in range(len(libLines)):
        #Access line content (& skip if line is empty)
        line = libLines[lineNum]
        if not line.strip(): continue
        #Determine if line is a mutant entry (not header, summary, etc..)
        words = line.split()
        if words[0] == "File:":
            #Compare to subset of mutant dict {} that doesn't include simulation results
            if extractMutantData(1, line) == {key:value for key, value in mutant.items() if key in ["file", "line", "position", "original", "mutant"]}:
                line = line.rstrip() + simulationEntryTemplate.format(mutant["killed"], mutant["fault free output"], mutant["mutant output"], mutant["test vector"])
                libLines[lineNum] = line
                return